# vim:ff=unix ts=2 sw=2 expandtab
---

- hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - set_fact: server_ami="{{ lookup('file', './ami_image.txt') | replace('\n', '') }}"
    - debug: msg="Using AMI '{{ server_ami }}'"

    - name: Fetching current DNS entry (to match up the elastic IP)
      shell: dig home.endlessm.com A +short | grep -v '[^0-9a-f\.\:]'
      register: dns_result
      when: server_elastic_ip is not defined

    - name: Setting the search IP
      set_fact: server_elastic_ip="{{ dns_result.stdout }}"
      when: server_elastic_ip is not defined

    - name: Fetching current deployment commit
      command: git rev-parse HEAD
      args:
        warn: no
      register: git_deploy_commit_result

    - name: Setting the deployment commit ID
      set_fact: deploy_commit="{{ git_deploy_commit_result.stdout }}"

    - name: Getting current deployment info for ip {{ server_elastic_ip }}
      ec2_remote_facts:
        filters:
          ip-address: "{{ server_elastic_ip }}"
          key_name: "{{ server_key }}"
        region: "{{ aws_region }}"
      register: ec2_instances

    - set_fact: old_instance_id="{{ ec2_instances.instances[0].id }}"

    - debug: msg="Old instance '{{ old_instance_id }}'"

    # XXX: WARNING! Mongo has no authentication on the server config
    #      so don't open 27017 to anything that isn't the aggregation
    #      infrastructure
    - ec2_group:
        name: "eos-activation-server"
        description: "Security group for the activation server"
        region: "{{ aws_region }}"
        rules:
          - cidr_ip: 0.0.0.0/0          # Allow SSH from anywhere
            proto: tcp
            from_port: 22
            to_port: 22
          - cidr_ip: 0.0.0.0/0          # Allow HTTP from anywhere
            proto: tcp
            to_port: 80
            from_port: 80
          - cidr_ip: 0.0.0.0/0          # Allow HTTPS from anywhere
            proto: tcp
            to_port: 443
            from_port: 443
          - cidr_ip: 52.25.206.231/32   # Mongo to HDP server (external)
            proto: tcp
            from_port: 27017
            to_port: 27017
          - cidr_ip: 172.31.8.54/32     # Mongo to HDP server (internal)
            proto: tcp
            from_port: 27017
            to_port: 27017
        rules_egress:
          - cidr_ip: 0.0.0.0/0
            proto: all

    - ec2_vol:
        instance: "{{ old_instance_id }}"
        state: list
        region: "{{ aws_region }}"
      register: volume_listing

    - set_fact:
        database_volume="{{ item.id }}"
        aws_zone="{{ item.zone }}"
      when: 'not item.attachment_set.device.endswith("sda1")'
      with_items: "{{ volume_listing.volumes }}"

    - debug: msg="Database Volume '{{ database_volume }}'"
    - debug: msg="Database Volume Zone '{{ aws_zone }}'"

    - name: Provisioning new instance
      ec2:
        region: "{{ aws_region }}"
        image: "{{ server_ami }}"
        key_name: "{{ server_key }}"
        instance_type: "{{ instance_type | default('t2.medium', False) }}"
        assign_public_ip: no
        group: "eos-activation-server"
        instance_tags:
          Name: eos-activation-server
          AMI: "{{ server_ami }}"
          DeployCommit: "{{ deploy_commit }}"
        # TODO: Use user data to set git token
        # user_data:
        termination_protection: yes
        wait: yes
        wait_timeout: 500
        zone: "{{ aws_zone }}"
      register: provisioning_result

    - set_fact: new_instance_id={{ provisioning_result.instance_ids[0] }}
    - debug: msg="New instance '{{ new_instance_id }}'"

    - name: Getting public IP of new instance
      ec2_remote_facts:
        region: "{{ aws_region }}"
        filters:
          instance-id: "{{ new_instance_id }}"
      register: new_instance_info

    - set_fact: new_instance_dns="{{ new_instance_info.instances[0].public_dns_name }}"
    - debug: msg="New instance dns '{{ new_instance_dns }}'"
    - add_host:
        name: "{{ new_instance_dns }}"
        groups: new_server_group

    - name: Wait until ssh is available
      wait_for:
        host: "{{ new_instance_dns }}"
        port: 22
        delay: 60
        timeout: 300
        state: started
        search_regex: OpenSSH

    # XXX: Ansible doesn't have a way to do this through EC module yet
    - name: Disabling shutdown protection on old instance
      command: >
        aws ec2 modify-instance-attribute
          --region "{{ aws_region }}"
          --instance-id "{{ old_instance_id }}"
          --attribute disableApiTermination --value false

    # XXX: Try to shut down the instance before wiping it but we
    #      currently can't since the volume doesn't want to detach on stop
    #      Upstream: https://github.com/ansible/ansible/issues/4127
    - name: Terminating the old instance
      ec2:
        region: "{{ aws_region }}"
        instance_ids:
          - "{{ old_instance_id }}"
        state: absent
        wait: yes
        wait_timeout: 500

# XXX: WARNING! Mongo has no authentication on the server config
#      so don't deploy this without a proper security group config
#      or iptables!
# XXX: This config is here and not in roles so that people don't assume
#      that the mongo role is safe by default.
- name: Set mongo params
  hosts: new_server_group
  remote_user: sysmgr
  gather_facts: False
  become: True
  tasks:
    - name: Setting mongo to listen to all interfaces
      lineinfile:
        dest: /etc/mongod.conf
        regexp: 'bindIp:'
        line: '  bindIp: 0.0.0.0'
      retries: 25
      delay: 5

- hosts: localhost
  connection: local
  gather_facts: False
  become: False
  tasks:
    - name: Attaching old volume to new instance
      ec2_vol:
        region: "{{ aws_region }}"
        instance: "{{ new_instance_id }}"
        id: "{{ database_volume }}"

    # XXX: Restarted state not in mainline even though it's in docs :/
    - name: Restarting new instance (1/2)
      ec2:
        region: "{{ aws_region }}"
        instance_ids: "{{ new_instance_id }}"
        state: stopped
        wait: yes
        wait_timeout: 500

    - name: Restarting new instance (2/2)
      ec2:
        region: "{{ aws_region }}"
        instance_ids: "{{ new_instance_id }}"
        state: running
        wait: yes
        wait_timeout: 500

    - name: Getting public IP of new instance again since it changes for restarts
      ec2_remote_facts:
        region: "{{ aws_region }}"
        filters:
          instance-id: "{{ new_instance_id }}"
      register: new_instance_info

    - set_fact: new_instance_dns="{{ new_instance_info.instances[0].public_dns_name }}"
    - debug: msg="New instance dns v2 '{{ new_instance_dns }}'"

    - name: Fetching new server DNS entry (to avoid problems with EC2 DNS)
      shell: dig "{{ new_instance_dns }}" A +short | grep -v '[^0-9a-f\.\:]'
      register: new_instance_dns_result

    - set_fact: new_instance_ip="{{ new_instance_dns_result.stdout }}"

    # Sanity checks
    - name: Wait until http port is available
      wait_for:
        host: "{{ new_instance_ip }}"
        port: 80
        delay: 5
        timeout: 300
        state: started

    - name: Checking the server availability (http)
      uri:
        url: http://{{ new_instance_ip }}
        follow_redirects: none
        return_content: yes
        status_code: 301
      retries: 25
      delay: 5

    - name: Forwarding the elastic IP to the new instance
      ec2_eip:
        region: "{{ aws_region }}"
        public_ip: "{{ server_elastic_ip }}"
        device_id: "{{ new_instance_id }}"
        in_vpc: yes
        reuse_existing_ip_allowed: yes
